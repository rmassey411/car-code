#include <Uardecs_mega.h>

#include <FastLED.h>

#include <FastLED.h>

#include <FastLED.h>

//Modern turn lights v.2.0.0 with arduino and ws2812b for cars andr trucks - by Fedaceag Ionut
#include <FastLED.h>                        //FastLed library version 3.2.1 - https://github.com/FastLED/FastLED/wiki/Overview or http://fastled.io/ with NEOPIXEL or WS2812B
#define NUM_STRIPS 1                   // number of led strips (in this example are front left and front right)
#define NUM_LEDS_PER_STRIP 144
// number of leds per each strip
CRGB leds[NUM_STRIPS][NUM_LEDS_PER_STRIP];
uint8_t gHue = 0;                           // rotating "base color" used by many of the patterns

//input pins
const int buttonPinL = 2;                   // turn left
const int buttonPinR = 3;                   // turn right
const int buttonPinEng = 4;                 // engine on to start day lights
const int buttonPinKnightRider = 5;         // knight rider lights
const int buttonPinBreak = 6;               // brake lights
const int buttonPinTailLights = 7;          // tail lights
const int buttonPinReverseLights = A0;      // reverse lights
const int buttonPinRearFogLights = A1;      // rear fog lights

int buttonStateL = 0;
int buttonStateR = 0;
int engineOn = 0;
int KnightRiderState = 0;
int Break = 0;
int TailLights = 0;
int ReverseLights = 0;
int RearFogLights = 0;

int stateLT = 0;
int stateRT = 0;
uint8_t gBrtL = 0;
uint8_t gBrtR = 0;
int TailOn = 0;

int maxBrt = 120;                                              // maxim brightness day lights - from 0 to 255
int maxBrtBreak = 255;                                         // maxim brightness Break lights - from 0 to 255
int maxBrtTailLights = 100;                                    // maxim brightness tail lights - from 0 to 255
int maxBrtReverseLights = 255;                                 // maxim brightness reverse lights - from 0 to 255
int maxBrtRearFogLights = 255;                                 // maxim brightness rear fog lights - from 0 to 255
int tailLightModel[] = {0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19}; // model array for tail lights leds from 0 - 19
int reverseLightModel[] = {7, 8, 9, 10, 11, 12};               // model array for reverse lights leds from 0 - 19
int rearFogLightsModel[] = {7, 8, 9, 10, 11, 12};              // model array for rear fog lights leds from 0 - 19

int delayTurnLedAnim = 10;                                     //delay of each led in turn light animation
int delayTurnLedOff = 250;                                     //delay from animation to black (is used twice)
int delayLedToDayLight = 500;                                  // delay from animation to day light on
int nrAnimAfterOff = 3;                                        // number of animations for a single impulse

unsigned long currentMillis = 0;
unsigned long previousMillis = 0;

void setup() {
  //Serial.begin(9600);
  pinMode(buttonPinL, INPUT);
  pinMode(buttonPinR, INPUT);
  pinMode(buttonPinEng, INPUT);
  pinMode(buttonPinKnightRider, INPUT);
  pinMode(buttonPinBreak, INPUT);
  pinMode(buttonPinReverseLights, INPUT);
  pinMode(buttonPinRearFogLights, INPUT);

  FastLED.addLeds<NEOPIXEL, 8>(leds[0], NUM_LEDS_PER_STRIP); //led strip front left
  FastLED.addLeds<NEOPIXEL, 9>(leds[1], NUM_LEDS_PER_STRIP); //led strip front right
  FastLED.addLeds<NEOPIXEL, 10>(leds[2], NUM_LEDS_PER_STRIP); //led strip rear left
  FastLED.addLeds<NEOPIXEL, 11>(leds[3], NUM_LEDS_PER_STRIP); //led strip rear right
  FastLED.addLeds<NEOPIXEL, 12>(leds[4], NUM_LEDS_PER_STRIP); //led strip tail break reverse and fog left
  FastLED.addLeds<NEOPIXEL, 13>(leds[5], NUM_LEDS_PER_STRIP); //led strip tail break reverse and fog right

  attachInterrupt(digitalPinToInterrupt(buttonPinL), btnPressL, RISING); // we use interrupt for instant reaction of turn lights
  attachInterrupt(digitalPinToInterrupt(buttonPinR), btnPressR, RISING); // we use interrupt for instant reaction of turn lights

  fill_solid(leds[0], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  fill_solid(leds[1], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  fill_solid(leds[2], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  fill_solid(leds[3], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  fill_solid(leds[4], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  fill_solid(leds[5], NUM_LEDS_PER_STRIP, CRGB::Black); // some led strips are all on at power on, so let's power them off at boot
  FastLED.show();
}

void loop() {
  // read the input state
  buttonStateL = digitalRead(buttonPinL);
  buttonStateR = digitalRead(buttonPinR);
  KnightRiderState = digitalRead(buttonPinKnightRider);

  EVERY_N_MILLISECONDS( 1 ) {
    engineOn = digitalRead(buttonPinEng);
  }

  //function for hazard lights
  if (stateLT != 0 && stateRT != 0) {

    for (int dot = 0; dot < NUM_LEDS_PER_STRIP; dot++) {
      leds[0][dot] = 0xff6a00; // color for left turn light
      leds[1][dot] = 0xff6a00; // color for left turn light
      leds[2][dot] = 0xff6a00; // color for right turn light
      leds[3][dot] = 0xff6a00; // color for left turn light
      FastLED.show();
      //delay(delayTurnLedAnim);
      currentMillis = previousMillis = millis();
      while (previousMillis + delayTurnLedAnim >= currentMillis) {
        TailAndBreak();
        FastLED.show();
        currentMillis = millis();
      }
    }

    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }
    fill_solid(leds[0], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[1], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[2], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[3], NUM_LEDS_PER_STRIP, CRGB::Black);
    FastLED.show();
    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }

    if (buttonStateL != HIGH || buttonStateR != HIGH) {

      if (buttonStateL == HIGH) {
        stateLT = 1;
      } else {
        stateLT = 0;
        gBrtL = 0;
      }

      if (buttonStateR == HIGH) {
        stateRT = 1;
      } else {
        stateRT = 0;
        gBrtR = 0;
      }

      if (buttonStateL != HIGH && buttonStateR != HIGH) {
        //delay(delayLedToDayLight);
        currentMillis = previousMillis = millis();
        while (previousMillis + delayLedToDayLight >= currentMillis) {
          TailAndBreak();
          FastLED.show();
          currentMillis = millis();
        }
      }

    }

    //function for left turn lights
  } else if (stateLT != 0) {

    if (KnightRiderState == HIGH && engineOn == LOW) {
      fill_solid(leds[1], NUM_LEDS_PER_STRIP, CRGB::Black);
    }

    for (int dot = 0; dot < NUM_LEDS_PER_STRIP; dot++) {
      leds[0][dot] = 0xff6a00; // color for left turn light
      leds[2][dot] = 0xff6a00; // color for left turn light
      FastLED.show();

      //delay(delayTurnLedAnim);
      currentMillis = previousMillis = millis();
      while (previousMillis + delayTurnLedAnim >= currentMillis) {
        TailAndBreak();
        FastLED.show();
        currentMillis = millis();
      }
    }

    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }

    fill_solid(leds[0], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[2], NUM_LEDS_PER_STRIP, CRGB::Black);
    FastLED.show();

    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }

    stateLT++;
    if (stateLT >= nrAnimAfterOff && buttonStateL != HIGH) {
      stateLT = 0;
      gBrtL = 0;
      //delay(delayLedToDayLight);
      currentMillis = previousMillis = millis();
      while (previousMillis + delayLedToDayLight >= currentMillis) {
        TailAndBreak();
        FastLED.show();
        currentMillis = millis();
      }
    }

    //function for right turn lights
  } else if (stateRT != 0) {

    if (KnightRiderState == HIGH && engineOn == LOW) {
      fill_solid(leds[0], NUM_LEDS_PER_STRIP, CRGB::Black);
    }

    for (int dot = 0; dot < NUM_LEDS_PER_STRIP; dot++) {
      leds[1][dot] = 0xff6a00; // color for right turn light
      leds[3][dot] = 0xff6a00; // color for right turn light
      FastLED.show();
      //delay(delayTurnLedAnim);
      currentMillis = previousMillis = millis();
      while (previousMillis + delayTurnLedAnim >= currentMillis) {
        TailAndBreak();
        FastLED.show();
        currentMillis = millis();
      }
    }

    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }
    fill_solid(leds[1], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[3], NUM_LEDS_PER_STRIP, CRGB::Black);
    FastLED.show();
    //delay(delayTurnLedOff);
    currentMillis = previousMillis = millis();
    while (previousMillis + delayTurnLedOff >= currentMillis) {
      TailAndBreak();
      FastLED.show();
      currentMillis = millis();
    }

    stateRT++;
    if (stateRT >= nrAnimAfterOff && buttonStateR != HIGH) {
      stateRT = 0;
      gBrtR = 0;
      //delay(delayLedToDayLight);
      currentMillis = previousMillis = millis();
      while (previousMillis + delayLedToDayLight >= currentMillis) {
        TailAndBreak();
        FastLED.show();
        currentMillis = millis();
      }
    }

  } else {

    if (stateLT == 0 && engineOn == HIGH) {
      if (gBrtL <= maxBrt) {
        EVERY_N_MILLISECONDS( 1 ) {
          gBrtL++;
        }
        fill_solid( leds[0], NUM_LEDS_PER_STRIP, CHSV(0, 0, gBrtL));
        //FastLED.show();
      }
    } else {
      if (gBrtL > 0) {
        EVERY_N_MILLISECONDS( 1 ) {
          gBrtL--;
        }
        fill_solid( leds[0], NUM_LEDS_PER_STRIP, CHSV(0, 0, gBrtL));
        //FastLED.show();
      } else {
        if (KnightRiderState == HIGH) {
          gHue = 0;
          //EVERY_N_MILLISECONDS( 20 ) { gHue++; }
          fadeToBlackBy( leds[0], NUM_LEDS_PER_STRIP, 20);
          int pos = beatsin16( 30, 0, NUM_LEDS_PER_STRIP - 1 );
          leds[0][pos] += CHSV( gHue, 255, 192);
          //FastLED.show();
        } else {
          fill_solid(leds[0], NUM_LEDS_PER_STRIP, CRGB::Black);
          //FastLED.show();
        }
      }
    }

    if (stateRT == 0 && engineOn == HIGH) {
      if (gBrtR <= maxBrt) {
        EVERY_N_MILLISECONDS( 1 ) {
          gBrtR++;
        }
        fill_solid( leds[1], NUM_LEDS_PER_STRIP, CHSV(0, 0, gBrtR));
        //FastLED.show();
      }
    } else {
      if (gBrtR > 0) {
        EVERY_N_MILLISECONDS( 1 ) {
          gBrtR--;
        }
        fill_solid( leds[1], NUM_LEDS_PER_STRIP, CHSV(0, 0, gBrtR));
        //FastLED.show();
      } else {
        if (KnightRiderState == HIGH) {
          gHue = 0;
          //EVERY_N_MILLISECONDS( 20 ) { gHue++; }
          fadeToBlackBy( leds[1], NUM_LEDS_PER_STRIP, 20);
          int pos = beatsin16( 30, 0, NUM_LEDS_PER_STRIP - 1 );
          leds[1][pos] += CHSV( gHue, 255, 192);
          //FastLED.show();
        } else {
          fill_solid(leds[1], NUM_LEDS_PER_STRIP, CRGB::Black);
          //FastLED.show();
        }
      }
    }

    TailAndBreak();
    FastLED.show();
  }
}

//function for left signal interrupt
void btnPressL() {
  stateLT = 1;
  for (int nr = 0; nr < 1500; nr++) {
    buttonStateR = digitalRead(buttonPinR);
    if (buttonStateR == 1) {
      stateRT = 1;
    }
  }
}

//function for right signal interrupt
void btnPressR() {
  stateRT = 1;
  for (int nr = 0; nr < 1500; nr++) {
    buttonStateL = digitalRead(buttonPinL);
    if (buttonStateL == 1) {
      stateLT = 1;
    }
  }
}

//function for break lights, tail lights fog lights and reverse lights
void TailAndBreak() {

  Break = digitalRead(buttonPinBreak);
  TailLights = digitalRead(buttonPinTailLights);
  ReverseLights = digitalRead(buttonPinReverseLights);
  RearFogLights = digitalRead(buttonPinRearFogLights);

  if (TailLights == HIGH && Break == LOW) {

    if (TailOn == 0) {
      fill_solid(leds[4], NUM_LEDS_PER_STRIP, CRGB::Black);
      fill_solid(leds[5], NUM_LEDS_PER_STRIP, CRGB::Black);
      TailOn = 1;
    } else if (TailOn == 1) {
      for (int i = 0; i < sizeof(tailLightModel) / sizeof(tailLightModel[0]); i++) {
        leds[4][tailLightModel[i]] = CHSV(0, 255, maxBrtTailLights);
        leds[5][tailLightModel[i]] = CHSV(0, 255, maxBrtTailLights);
      }
      TailOn = 2;
    }
  } else if (Break == HIGH) {
    fill_solid( leds[4], NUM_LEDS_PER_STRIP, CHSV(0, 255, maxBrtBreak));
    fill_solid( leds[5], NUM_LEDS_PER_STRIP, CHSV(0, 255, maxBrtBreak));
    TailOn = 0;
  } else {
    fill_solid(leds[4], NUM_LEDS_PER_STRIP, CRGB::Black);
    fill_solid(leds[5], NUM_LEDS_PER_STRIP, CRGB::Black);
    TailOn = 0;
  }

  if (ReverseLights == HIGH) {
    for (int i = 0; i < sizeof(reverseLightModel) / sizeof(reverseLightModel[0]); i++) {
      leds[4][reverseLightModel[i]] = CHSV(0, 0, maxBrtReverseLights);
      leds[5][reverseLightModel[i]] = CHSV(0, 0, maxBrtReverseLights);
    }
  } else {
    if (TailOn == 2) {
      TailOn = 1;
    }
  }

  if (RearFogLights == HIGH) {
    for (int i = 0; i < sizeof(rearFogLightsModel) / sizeof(rearFogLightsModel[0]); i++) {
      leds[4][rearFogLightsModel[i]] = CHSV(0, 255, maxBrtRearFogLights); //left led strip
      //leds[5][rearFogLightsModel[i]]=CHSV(0,255,maxBrtRearFogLights); //right led strip (uncoment this line if you want fog lights on both sides)
    }
  } else {
    if (TailOn == 2) {
      TailOn = 1;
    }
  }

}
